/** Rishant Rokaha
 * Professor Vohra
 * Design and Analysis of Algorithms
 * 31 January 2021
 * Assignment 1
 */

package rrokaha;

public class InsertionSortLinkedList<T extends Comparable<T>>{
    private Node firstNode;
    int length;

    public InsertionSortLinkedList() {
        this.firstNode = null;
        this.length = 0;
    }

    public void add(T newEntry){
        Node newNode=new Node(newEntry,firstNode);
        firstNode=newNode;
        length++;
    }

    public int getLength(){
        return length;
    }
    public void sort(){
        insertionSort(firstNode);
    }


    public T[] toArray() {
        T[] result= (T[]) new Comparable[length];
        int index=0;
        Node currentNode=firstNode;
        while((index<length)&&(currentNode!=null)){
            result[index]= currentNode.getData();
            currentNode=currentNode.getNextNode();
            index++;
        }
        return result;
    }

    private void insertionSort(Node firstNode){
        if(length>1){
            Node unsortedPart=firstNode.getNextNode();
            firstNode.setNextNode(null);

            while(unsortedPart!=null){
                Node nodeToInsert=unsortedPart;
                unsortedPart=unsortedPart.getNextNode();
                insertInOder(nodeToInsert);
            }
        }
    }

    private void insertInOder(Node nodeToInsert) {
        T item=nodeToInsert.getData();
        Node currentNode=firstNode;
        Node previousNode=null;

        while((currentNode!=null) && (item.compareTo(currentNode.getData())>0)){
            previousNode=currentNode;
            currentNode=currentNode.getNextNode();
        }
        if(previousNode!=null){
            previousNode.setNextNode(nodeToInsert);
            nodeToInsert.setNextNode(currentNode);
        }else{
            nodeToInsert.setNextNode(firstNode);
            firstNode=nodeToInsert;
        }
    }

    private class Node{
        private T data;
        private Node next;
        private Node(T dataportion){
            this(dataportion,null);
        }
        private Node(T dataPortion,Node nextNode){
            data=dataPortion;
            next=nextNode;
        }

        private T getData() {
            return data;
        }

        private void setData(T data) {
            this.data = data;
        }

        private Node getNextNode() {
            return next;
        }

        private void setNextNode(Node next) {
            this.next = next;
        }
    }
}
